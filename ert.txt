1.
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int i, n, a[1000], key, bottom, top, mid, j, temp;
    double clk;
    clock_t starttime, endtime;
    
    printf("Enter the number of Products\n");
    scanf("%d", &n);
    
    for (i = 0; i < n; i++) {
        a[i] = rand() % 100;
        printf("The Product ID is: %d\n", a[i]); // Add newline character after printing each ID
    }
    
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (a[j] > a[j + 1]) {
                temp = a[j];
                a[j] = a[j + 1];
                a[j + 1] = temp;
            }
        }
    }
    
    printf("\nSorted Product ID List is:\n");
    for (i = 0; i < n; i++) {
        printf("%d\t", a[i]);
    }
    
    printf("\nEnter the Product ID to be searched:\n");
    scanf("%d", &key);
    
    starttime = clock();
    bottom = 0; // Start from index 0
    top = n - 1; // Correcting the index
    do {
        mid = (bottom + top) / 2;
        if (key < a[mid])
            top = mid - 1;
        else if (key > a[mid])
            bottom = mid + 1;
    } while (key != a[mid] && bottom <= top);
    
    if (key == a[mid]) {
        printf("\nProduct found!!\n");
        printf("\nProduct %d found in position: %d\n", key, mid + 1);
    } else {
        printf("\nSearch failed\n%d not found\n", key);
    }
    
    endtime = clock();
    clk = (double)(endtime - starttime) / CLOCKS_PER_SEC;
    printf("Time taken: %f seconds\n", clk);
    
    return 0;
}





2.
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void bfs(int a[10][10], int n, int source) {
    int s[10], q[10], f = 0, r = -1, t, v;
    for (v = 0; v < n; v++) {
        s[v] = 0;
    }
    q[++r] = source;
    s[source] = 1;
    printf("The BFS traversal is:\n%d ", source); // Print source node outside the loop
    while (f <= r) {
        t = q[f++];
        for (v = 0; v < n; v++) {
            if (a[t][v] == 1 && s[v] == 0) {
                q[++r] = v;
                printf("%d ", v); // Print current node
                s[v] = 1;
            }
        }
    }
    printf("\n");
}

int main() {
    int a[10][10], n, i, j, s;
    double clk;
    clock_t starttime, endtime;
    
    printf("\nEnter the number of cities: ");
    scanf("%d", &n);
    printf("\nEnter the matrix representation:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &a[i][j]);
    printf("\nEnter the source city: ");
    scanf("%d", &s);
    
    starttime = clock();
    bfs(a, n, s);
    endtime = clock();
    clk = (double)(endtime - starttime) / CLOCKS_PER_SEC;
    printf("\nThe run time is %f\n", clk);
    
    return 0;
}



3.
#include<time.h>
#include<stdio.h>

int n,a[50][50],i,j,count=0,reach[50],pos[50];

void read_matrix();
void dfs(int v);
int adjacent(int i);
int checkreach(int u);

int main()
{
        int v;
        double clk;
        clock_t starttime,endtime;
        printf("\n\t\t\t DEPTH FIRST SEARCH \n");
        printf("\n Enter number of Lands to be surveyed:");
        scanf("%d",&n);
        for(i=1;i<=n;i++)
       {	
          	pos[i]=0;
       }
        read_matrix();
        printf("\n Enter the starting Land number:");
        scanf("%d",&v);
        starttime=clock();
        dfs(v);
        endtime=clock();
        clk=(double)(endtime-starttime)/CLOCKS_PER_SEC;
        printf("\n Vertices reached from the given vertex are...\n");
       for(i=1;i<=count;i++)
       {
	printf("%d\t",reach[i]);
       }
        printf("\nThe run time is %f\n",clk);
        return 0;
}

void read_matrix()
{
	printf("\n Enter the adjacency matrix (Enter 0/1)\n");
	for(i=1;i<=n;i++)
	for(j=1;j<=n;j++)
	if(i!=j)
	{
		printf("(%d,%d):",i,j);
		scanf("%d",&a[i][j]);
	}
}

void dfs(int v)
{
	int u;
	reach[++count]=v;
	u=adjacent(v);
	while(u)
	{
		if(checkreach(u)==0) dfs(u);
		u=adjacent(v);
	}
}

int adjacent(int i)
{
	for(j=pos[i]+1;j<=n;j++)
	if(a[i][j]==1)
	{
		pos[i]=j;
		return j;
	}
	pos[i]=n+1;
	return 0;
}

int checkreach(int u)
{
	for(i=1;i<=count;i++)
	if(reach[i]==u)
		return 1;
	return 0;
}




4.
#include <stdio.h>
#include <time.h>
#include <stdlib.h>

void insertion_sort(long a[], int n)
{
    int i, j;
    long v;
    for(i = 1; i < n; i++)
    {
        v = a[i];
        j = i - 1;
        while(j >= 0 && a[j] > v)
        {
            a[j + 1] = a[j];
            j--;
        }
        a[j + 1] = v;
    }
    printf("sorted numbers are:\n");
    for(i = 0; i < n; i++)
        printf("%ld\n", a[i]);
}

int main()
{
    clock_t starttime, endtime;
    starttime = clock();
    double clk;
    int i, n;
    long a[10];
    printf("Enter the value of n: ");
    scanf("%d", &n);
    if(n > 10)
    {
        printf("n should be less than or equal to 10\n");
        return 1;
    }
    for(i = 0; i < n; i++)
        a[i] = 9000000000 + (rand() % 99999999) + 1;
    printf("\nphone numbers are:\n");
    for(i = 0; i < n; i++)
        printf("%ld\n", a[i]);
    insertion_sort(a, n);
    endtime = clock();
    clk = (double) (endtime - starttime) / CLOCKS_PER_SEC;
    printf("\nTHE RUN TIME IS : %f\n", clk);
    return 0;
}



5.
#include<stdio.h>
#include<time.h>
#include<stdlib.h>

int a[500000];

void merge(int low, int mid, int high);
void merge_sort(int low, int high);

void merge_sort(int low, int high)
{
    int mid;
    if(low < high)
    {
        mid = (low + high) / 2;
        merge_sort(low, mid);
        merge_sort(mid + 1, high);
        merge(low, mid, high);
    }
}

void merge(int low, int mid, int high)
{
    int h, i, j, b[500000], k;
    h = low;
    i = low;
    j = mid + 1;
    while((h <= mid) && (j <= high))
    {
        if(a[h] <= a[j])
        {
            b[i] = a[h];
            h++;
        }
        else
        {
            b[i] = a[j];
            j++;
        }
        i++;
    }
    if(h > mid)
    {
        for(k = j; k <= high; k++)
        {
            b[i] = a[k];
            i++;
        }
    }
    else
    {
        for(k = h; k <= mid; k++)
        {
            b[i] = a[k];
            i++;
        }
    }
    for(k = low; k <= high; k++) a[k] = b[k];
}

int main()
{
    int n, i;
    double clk;
    clock_t starttime, endtime;
    printf("MERGE SORT\n");
    printf("Enter the number of employee records:\n ");
    scanf("%d", &n);
    for(i = 0; i < n; i++) 
    {
        a[i] = rand() % 100;
        printf("The Employee IDs are: \t%d", a[i]);
    }
    printf("\n");
    starttime = clock(); 
    merge_sort(0, n - 1);
    endtime = clock();
    clk = (double)(endtime - starttime) / CLOCKS_PER_SEC;
    printf("\nEmployee IDs in sorted order:\n");
    for(i = 0; i < n; i++) 
    {
        printf("\t%d", a[i]);
    }
    printf("\nThe run time is %f\n", clk);
    return 0;
}




6.
#include<stdio.h>
#include<time.h>
#include<stdlib.h>

int partition(int a[], int low, int high)
{
    int i, j, temp, pivot;
    pivot = a[low];
    i = low + 1;
    j = high;
    while(1)
    {
        while(i < high && a[i] <= pivot)
            i++;
        while(a[j] > pivot)
            j--;
        if(i < j)
        {
            temp = a[i];
            a[i] = a[j];
            a[j] = temp;
        }
        else
        {
            temp = a[j];
            a[j] = a[low];
            a[low] = temp;
            return j;
        }
    }
}

void quick_sort(int a[], int low, int high)
{
    int j;
    if(low < high)
    {
        j = partition(a, low, high);
        quick_sort(a, low, j - 1);
        quick_sort(a, j + 1, high);
    }
}

int main()
{
    int i, n, a[200000];
    double clk;
    clock_t starttime, endtime;
    printf("Enter the number of students records: \n");
    scanf("%d", &n);
    for(i = 0; i < n; i++) 
    {
        a[i] = rand() % 100;
        printf("The roll numbers are \t%d", a[i]);
    }
    printf("\n");
    starttime = clock();
    quick_sort(a, 0, n - 1);
    endtime = clock();
    clk = (double)(endtime - starttime) / CLOCKS_PER_SEC;
    printf("\nSorted roll numbers are: \n");
    for(i = 0; i < n; i++)
        printf("\t%d", a[i]);
    printf("\nThe run time is %f\n", clk);
    return 0;
}




7.
#include<stdio.h>
#include<time.h>
#include<stdlib.h>

#define TRUE 1
#define FALSE 0

void heapbottomup(int h[], int n)
{
    int i, heap, v, j, k;
    for(i = n / 2; i >= 1; i--)
    {
        k = i;
        v = h[k];
        heap = FALSE;
        while(!heap && (2 * k) <= n)
        {
            j = 2 * k;
            if(j < n)
                if(h[j] < h[j + 1])
                    j = j + 1;
            if(v >= h[j])
                heap = TRUE;
            else
            {
                h[k] = h[j];
                k = j;
            }
        }
        h[k] = v;
    }
}

void heapsort(int h[], int n)
{
    int i, temp, last = n;
    if(n <= 1)
        return;
    else
    {
        heapbottomup(h, n);
        for(i = n; i >= 2; i--)
        {
            temp = h[1];
            h[1] = h[i];
            h[i] = temp;
            heapbottomup(h, i - 1);
        }
    }
}

int main()
{
    int h[20], n, i;
    double clk;
    clock_t starttime, endtime;
    printf("\n Enter the number of resumes\n");
    scanf("%d", &n);
    for(i = 1; i <= n; i++) 
    {
        h[i] = rand() % 100;
        printf("The candidates ranks are: \t%d", h[i]);
    }
    printf("\n");
    starttime = clock();
    heapsort(h, n);
    endtime = clock();
    clk = (double)(endtime - starttime) / CLOCKS_PER_SEC;
    printf("\n The ranks in sorted order: \n");
    for(i = 1; i <= n; i++)
        printf("\t%d", h[i]);
    printf("\nThe run time is %f\n", clk);
    return 0;
}



8.
#include<stdio.h>
#include<string.h>
#include<conio.h>

#define MAX 256 // Assuming ASCII characters

int t[MAX];

void shifttable(char p[])
{
    int i, j, m;
    m = strlen(p);
    for(i = 0; i < MAX; i++)
        t[i] = m;
    for(j = 0; j < m - 1; j++)
        t[(int)p[j]] = m - 1 - j;
}

int horspool(char src[], char p[])
{
    int i, j, k, m, n;
    n = strlen(src);
    m = strlen(p);
    printf("\nLength of text = %d", n);
    printf("\nLength of pattern = %d", m);
    i = m - 1;
    while(i < n)
    {
        k = 0;
        while((k < m) && (p[m - 1 - k] == src[i - k]))
            k++;
        if(k == m)
            return(i - m + 1);
        else
            i += t[(int)src[i]];
    }
    return -1;
}

int main()
{
    char src[100], p[100];
    int pos;
    clrscr();
    printf("Enter the text in which pattern is to be searched:\n");
    fgets(src, sizeof(src), stdin);
    printf("Enter the pattern to be searched:\n");
    fgets(p, sizeof(p), stdin);
    p[strlen(p) - 1] = '\0'; // Remove the newline character
    shifttable(p);
    pos = horspool(src, p);
    if(pos >= 0)
        printf("\n The desired pattern was found starting from position %d", pos + 1);
    else
        printf("\n The pattern was not found in the given text");
    getch();
    return 0;
}